Painful errors so that I don't have to re google

Regex link
http://cheatography.com/davechild/cheat-sheets/regular-expressions/

Superuser
username - rango 
pw - rango 

-on the main url.py page needs to use the patterns function, not define a tuple
-don't apply EOL to a string, won't parse properly

-find correct way to place templates directory
'DIRS': [TEMPLATE_PATH,], where template path is 'path'

-bug with adding slug to category models, added the default then just did migrate




Some general notes
-views are hooked into urls via name of class, category page, url must have 



NOTES and SUMMARIES
==========================================================

Summary - Templates
-create template, specify path in setting.py
-view is where the template is actually used
-create view within project dir, view.py. Can add logic ie. extracting data from a DB
-construct dictionary to pass
-map view to url on url.py

==========================================================

Summary - Models 
-create models, do makemig on the app, then run pm sqlmigrate app mig#
-for every new model, makemig -> mig
-configue DB in setting.py
-create model in app's models.py, update admin.py to register model, do makemig -> mig, create population script for models
-if db needs to be deleted, migrate, createsuperuser, sqlmigrate

==========================================================

Summary - Models, Templates and Views
-data driven apps, import models, query models to get data, pass results from model into template, set up template, map URL to view
-understand that the entry point is the url, it then finds finds the view, parameter in the url is what is passed to the view function
-configure it properly on the urls.py, as in it must match, in the urls.py and category()

==========================================================

Summary - Forms
-isolate forms in the application's form.py module
-create the view, template, add url and add it on through the index
-forms.py -> create views.py -> create template -> add url -> link it up on whatever page it is meant to be displayed
-views take the data from the models and pass it to the template as a context dict

==========================================================

Summary - Authentication
-create the models, forms, views, urls
-login/logout, restrict access if not logged in

==========================================================

Summary - Working with templates
-reduce redundant html, use a base template and create blocks for content
-template does not exist error, correct dir needed to be in template/base.html
-as pages are replaced with templates, some footer links should not be displayed

==========================================================

Summary - Cookies and sessions
-cookies are stored on the server side and provided on request by the client (post visit)
-can used sessions instead of cookies for safety purposes
-super confused

==========================================================

Summary - User auth, django-resgistration-redux
-plugin so you don't have to write auth
-how to, add it to installed apps, pass it to urls,	and create templates of you own
-use account/ to find the names for the urls, to use on templates
-no longer a need to write your own forms, models, and views

==========================================================

Summary - Bootstrapping Rango
-updating base.html makes a difference everywhere
-all the templates have to be painfully tweaked, have to look at each bootstrap class, I guess it's better writing your own

==========================================================

Summary - Template Tags
-categories on the sidebar, so repeated html
-the categories list called through a function, and linked with a bit of html, dope
-3 steps, create function, sync it with the html, and render it wherever

==========================================================

Summary - Adding External Search Functionality
-first get free API key, need to create a function that queries the Bing's server for a result, done in json
-the usual, create template page, create view, create url and link it up an base.html

==========================================================

Summary - Making Rango Tango
-3 tasks
-tracking page clicks to ext links, ie. rango -> flask
--create track_url view, map it to goto/ and name it 'goto'
--create a get request that has the page id as parameter through a query string
--this is activated each time a person clicks on the url, it goes through goto/ first so that the db object can be modified

-searching and browsing between categories
--search is done through post, when something goes through as a POST, the name of the input is picked up from the view, like a dict, POST['value']
--search and add pages to current category

-services for registered users
--what

==========================================================


